{"version":3,"sources":["chime.wav","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","children","Button","onClick","App","state","teams","teamName","qLeft","timeLeft","timerIsRunning","intervalId","locked","footerText","handleTeamNameChange","bind","detuctQuestion","addQuestion","resetTimer","controlTimer","manipulateTimer","toggleLock","playChime","Audio","chime","play","index","event","setState","target","value","length","push","pop","Math","max","min","this","clearInterval","setInterval","id","map","team","type","onChange","style","textAlign","filter","trim","color","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementsByTagName"],"mappings":"uPAAe,MAA0B,kC,eCIzC,SAASA,EAAKC,GACV,OACI,qBAAKC,UAAU,OAAf,SACKD,EAAME,WAKnB,SAASC,EAAOH,GACZ,OACI,qBAAKI,QAASJ,EAAMI,QAASH,UAAU,SAAvC,SACKD,EAAME,W,IA4MJG,E,kDAtMX,WAAYL,GAAQ,IAAD,8BACf,cAAMA,IACDM,MAAQ,CACTC,MAAO,CACH,CACIC,SAAU,GACVC,MAAO,GACPC,SAAU,GACVC,gBAAgB,EAChBC,WAAY,IAGpBC,QAAQ,EACRC,WAAY,IAGhB,EAAKC,qBAAuB,EAAKA,qBAAqBC,KAA1B,gBAE5B,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBAEtB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBAEnB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAElB,EAAKI,aAAe,EAAKA,aAAaJ,KAAlB,gBAEpB,EAAKK,gBAAkB,EAAKA,gBAAgBL,KAArB,gBAEvB,EAAKM,WAAa,EAAKA,WAAWN,KAAhB,gBAElB,EAAKO,UAAY,WACD,IAAIC,MAAMC,GAChBC,QAhCK,E,wDAoCnB,SAAqBC,GAAQ,IAAD,OACxB,OAAQ,SAACC,GACL,EAAKC,UAAS,SAACvB,EAAON,GAElB,IAAIO,EAAQD,EAAMC,MAOlB,IANAA,EAAMoB,GAAOnB,SAAWoB,EAAME,OAAOC,MAEjCxB,EAAMA,EAAMyB,OAAS,GAAGxB,SAASwB,OAAS,GAC1CzB,EAAM0B,KAAK,CAAEzB,SAAU,GAAIC,MAAO,GAAIC,SAAU,KAG7CH,EAAMyB,OAAS,GAAiD,IAA5CzB,EAAMA,EAAMyB,OAAS,GAAGxB,SAASwB,QACxDzB,EAAM2B,MAGV,OAAO,2BACA5B,GADP,IAEIC,MAAOA,U,4BAMvB,SAAeoB,GAAQ,IAAD,OAClB,OAAQ,WACJ,EAAKE,UAAS,SAAAvB,GACV,IAAIC,EAAQD,EAAMC,MAElB,OADAA,EAAMoB,GAAOlB,MAAQ0B,KAAKC,IAAI,EAAG7B,EAAMoB,GAAOlB,MAAQ,GAC/C,2BACAH,GADP,IAEIC,MAAOA,U,yBAMvB,SAAYoB,GAAQ,IAAD,OACf,OAAQ,WACJ,EAAKE,UAAS,SAAAvB,GACV,IAAIC,EAAQD,EAAMC,MAElB,OADAA,EAAMoB,GAAOlB,MAAQ0B,KAAKE,IAAI,GAAI9B,EAAMoB,GAAOlB,MAAQ,GAChD,2BACAH,GADP,IAEIC,MAAOA,U,wBAMvB,SAAWoB,GACPW,KAAKT,UAAS,SAACvB,EAAON,GAClB,IAAIO,EAAQD,EAAMC,MAIlB,OAHAA,EAAMoB,GAAOjB,SAAW,GACxB6B,cAAchC,EAAMoB,GAAOf,YAC3BL,EAAMoB,GAAOhB,gBAAiB,EACvB,2BACAL,GADP,IAEIC,MAAOA,S,0BAKnB,SAAaoB,GAAQ,IAAD,OAChB,OAAOa,aAAY,WAC0B,IAArC,EAAKlC,MAAMC,MAAMoB,GAAOjB,UACxB,EAAKS,WAAWQ,GAChB,EAAKJ,YACL,EAAKM,UAAS,SAACvB,EAAON,GAClB,IAAIO,EAAQD,EAAMC,MAElB,OADAA,EAAMoB,GAAOlB,OAAS,EACf,2BACAH,GADP,IAEIC,MAAOA,QAIf,EAAKsB,UAAS,SAACvB,EAAON,GAClB,IAAIO,EAAQD,EAAMC,MAGlB,OAFAA,EAAMoB,GAAOjB,UAAY,EAElB,2BACAJ,GADP,IAEIC,MAAOA,SAIpB,O,6BAGP,SAAgBoB,GAAQ,IAAD,OACnB,OAAQ,WACJ,EAAKE,UAAS,SAACvB,EAAON,GAClB,IAAIO,EAAQD,EAAMC,MAEdA,EAAMoB,GAAOhB,gBACb4B,cAAchC,EAAMoB,GAAOf,YAC3BL,EAAMoB,GAAOhB,gBAAiB,IAE9BJ,EAAMoB,GAAOf,WAAa,EAAKQ,aAAaO,GAC5CpB,EAAMoB,GAAOhB,gBAAiB,S,wBAM9C,WACI2B,KAAKT,UAAS,SAACvB,EAAON,GAClB,OAAO,2BACAM,GADP,IAEIO,QAASP,EAAMO,c,oBAK3B,WAAU,IAAD,OACL,OACI,iCACI,wBAAQ4B,GAAG,OAAOxC,UAAU,SAASG,QAASkC,KAAKhB,WAAnD,kBACA,qCAESgB,KAAKhC,MAAMO,QAAZ,sBAA0ByB,KAAKhC,MAAMC,MAAMmC,KACvC,SAACC,EAAMhB,GAAP,OAAiB,eAAC5B,EAAD,WACb,uBACI6C,KAAK,OACLb,MAAO,EAAKzB,MAAMC,MAAMoB,GAAOnB,SAC/BqC,SAAU,EAAK9B,qBAAqBY,KAExC,iCAAOgB,EAAKlC,MAAZ,qBACA,+BAAOkC,EAAKjC,SAAW,QAPCiB,OADhC,CAUG,mBAAWmB,MAAO,CAAEC,UAAW,UAA/B,iCAAO,OAIVT,KAAKhC,MAAMO,QAAX,sBAAyByB,KAAKhC,MAAMC,MAAMyC,QAAO,SAAAL,GAAI,OAAIA,EAAKnC,SAASyC,OAAOjB,OAAS,KAAGU,KACtF,SAACC,EAAMhB,GACH,OACI,eAAC5B,EAAD,WACI,+BAAO4C,EAAKnC,WACZ,uBAAMP,UAAU,YAAhB,UACK0C,EAAKlC,MADV,QAEI,uBAAMR,UAAU,mBAAhB,UACI,cAACE,EAAD,CAAQC,QAAS,EAAKa,eAAeU,GAArC,eACA,cAACxB,EAAD,CAAQC,QAAS,EAAKc,YAAYS,GAAlC,qBAGR,eAACxB,EAAD,CAAQC,QAAS,EAAKiB,gBAAgBM,GAAtC,UACKgB,EAAKjC,UAAY,IAAM,sBAAMoC,MAAO,CAAEI,MAAO,OAAtB,SAAgCP,EAAKjC,SAAW,MACvEiC,EAAKjC,SAAW,IAAMiC,EAAKjC,SAAW,OAE3C,cAACP,EAAD,CAAQC,QAAS,WAAQ,EAAKe,WAAWQ,IAAzC,qBAbOA,OAHvB,CAoBG,mBAAGmB,MAAO,CAAEC,UAAW,UAAvB,8C,GA/LTI,aCRHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,qBAAqB,QAAQ,IAMxCZ,M","file":"static/js/main.10ef7040.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/chime.2e8dd27a.wav\";","import { Component } from 'react';\nimport chime from './chime.wav';\nimport './App.css';\n\nfunction Card(props) {\n    return (\n        <div className=\"card\">\n            {props.children}\n        </div>\n    )\n}\n\nfunction Button(props) {\n    return (\n        <div onClick={props.onClick} className=\"button\">\n            {props.children}\n        </div>\n    )\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            teams: [\n                {\n                    teamName: \"\",\n                    qLeft: 20,\n                    timeLeft: 45,\n                    timerIsRunning: false,\n                    intervalId: 0\n                }\n            ],\n            locked: false,\n            footerText: \"\"\n        }\n\n        this.handleTeamNameChange = this.handleTeamNameChange.bind(this);\n\n        this.detuctQuestion = this.detuctQuestion.bind(this);\n\n        this.addQuestion = this.addQuestion.bind(this);\n\n        this.resetTimer = this.resetTimer.bind(this);\n\n        this.controlTimer = this.controlTimer.bind(this);\n\n        this.manipulateTimer = this.manipulateTimer.bind(this);\n\n        this.toggleLock = this.toggleLock.bind(this);\n\n        this.playChime = () => {\n            let track = new Audio(chime);\n            track.play();\n        }\n    }\n\n    handleTeamNameChange(index) {\n        return ((event) => {\n            this.setState((state, props) => {\n\n                let teams = state.teams;\n                teams[index].teamName = event.target.value;\n\n                if (teams[teams.length - 1].teamName.length > 0) {\n                    teams.push({ teamName: \"\", qLeft: 20, timeLeft: 45 });\n                }\n\n                while (teams.length > 1 && teams[teams.length - 2].teamName.length === 0) {\n                    teams.pop();\n                }\n\n                return {\n                    ...state,\n                    teams: teams\n                }\n            })\n        })\n    }\n\n    detuctQuestion(index) {\n        return (() => {\n            this.setState(state => {\n                let teams = state.teams;\n                teams[index].qLeft = Math.max(0, teams[index].qLeft - 1);\n                return {\n                    ...state,\n                    teams: teams\n                }\n            })\n        })\n    }\n\n    addQuestion(index) {\n        return (() => {\n            this.setState(state => {\n                let teams = state.teams;\n                teams[index].qLeft = Math.min(20, teams[index].qLeft + 1);\n                return {\n                    ...state,\n                    teams: teams\n                }\n            })\n        })\n    }\n\n    resetTimer(index) {\n        this.setState((state, props) => {\n            let teams = state.teams;\n            teams[index].timeLeft = 45;\n            clearInterval(teams[index].intervalId);\n            teams[index].timerIsRunning = false;\n            return {\n                ...state,\n                teams: teams\n            }\n        })\n    }\n\n    controlTimer(index) {\n        return setInterval(() => {\n            if (this.state.teams[index].timeLeft === 0) {\n                this.resetTimer(index);\n                this.playChime();\n                this.setState((state, props) => {\n                    let teams = state.teams;\n                    teams[index].qLeft -= 1;\n                    return {\n                        ...state,\n                        teams: teams\n                    }\n                })\n            } else {\n                this.setState((state, props) => {\n                    let teams = state.teams;\n                    teams[index].timeLeft -= 1;\n\n                    return {\n                        ...state,\n                        teams: teams\n                    }\n                })\n            }\n        }, 1000);\n    }\n\n    manipulateTimer(index) {\n        return (() => {\n            this.setState((state, props) => {\n                let teams = state.teams;\n\n                if (teams[index].timerIsRunning) {\n                    clearInterval(teams[index].intervalId);\n                    teams[index].timerIsRunning = false;\n                } else {\n                    teams[index].intervalId = this.controlTimer(index);\n                    teams[index].timerIsRunning = true;\n                }\n            })\n        })\n    }\n\n    toggleLock() {\n        this.setState((state, props) => {\n            return {\n                ...state,\n                locked: !state.locked\n            }\n        })\n    }\n\n    render() {\n        return (\n            <main>\n                <button id=\"lock\" className=\"button\" onClick={this.toggleLock}>Lock</button>\n                <section>\n                    {\n                        !this.state.locked && [...this.state.teams.map(\n                            (team, index) => <Card key={index}>\n                                <input\n                                    type=\"text\"\n                                    value={this.state.teams[index].teamName}\n                                    onChange={this.handleTeamNameChange(index)}\n                                />\n                                <span>{team.qLeft} questions left</span>\n                                <span>{team.timeLeft + \"s\"}</span>\n                            </Card>\n                        ), <p key=\"n\" style={{ textAlign: \"center\" }}>Words and stuff here</p>]\n                    }\n\n                    {\n                        this.state.locked && [...this.state.teams.filter(team => team.teamName.trim().length > 0).map(\n                            (team, index) => {\n                                return (\n                                    <Card key={index}>\n                                        <span>{team.teamName}</span>\n                                        <span className=\"questions\">\n                                            {team.qLeft} left\n                                            <span className=\"question-buttons\">\n                                                <Button onClick={this.detuctQuestion(index)}>-</Button>\n                                                <Button onClick={this.addQuestion(index)}>+</Button>\n                                            </span>\n                                        </span>\n                                        <Button onClick={this.manipulateTimer(index)}>\n                                            {team.timeLeft <= 10 && <span style={{ color: \"red\" }}>{team.timeLeft + \"s\"}</span>}\n                                            {team.timeLeft > 10 && team.timeLeft + \"s\"}\n                                        </Button>\n                                        <Button onClick={() => { this.resetTimer(index) }}>Reset</Button>\n                                    </Card>\n                                );\n                            }\n                        ), <p style={{ textAlign: \"center\" }}>Words and stuff here</p>]\n                    }\n                </section>\n            </main>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementsByTagName(\"body\")[0]\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}