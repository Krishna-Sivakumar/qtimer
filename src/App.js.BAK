import {Component} from 'react';
import './App.css';

function Card(props) {
  return (
    <div class="card">
      {props.children}
    </div>
  )
}

function Button(props) {
  return (
    <div onClick={props.onClick} class="button">
      {props.children}
    </div>
  )
}

class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      teams: [
        {
          teamName: "",
          qLeft: 20,
          timeLeft: 45,
          timerIsRunning: false,
          intervalId: 0
        }
      ],
      locked: false,
      footerText: ""
    }
    
    this.handleTeamNameChange = (index) => {
      return ((event) => {
        this.setState((state, props) => {
          
          let teams = state.teams;
          teams[index].teamName = event.target.value;

          try {
            if (teams[teams.length - 1].teamName.length > 0) {
              teams.push({teamName: "", qLeft: 20, timeLeft: 45});
            }

            while (teams.length > 1 && teams[teams.length - 2].teamName.length == 0) {
              teams.pop();
            }

            return {
              ...state,
              teams: teams
            }
          } catch (error) {
            console.log(error);
          }
        })
      })
    }
    
    this.manipulateQuestion = (index, operation) => {
      return ((event) => {
        this.setState((state, props) => {
          let teams = state.teams;
          if (operation == "add")
            teams[index].qLeft = Math.min(20, teams[index].qLeft+1);
          else if (operation == "subtract")
            teams[index].qLeft = Math.max(0, teams[index].qLeft-1);
          console.log(teams)
          return {
            ...state,
            teams: teams
          }
        })
      })
    }
    
    this.resetTimer = (index) => {
      this.setState((state, props) => {
        let teams = state.teams;
        teams[index].timeLeft = 45;
        clearInterval(teams[index].intervalId);
        teams[index].timerIsRunning = false;
        return {
          ...state,
          teams: teams
        }
      })
    }
    
    this.controlTimer = (index) => {
      return setInterval(() => {
        if (this.state.teams[index].timeLeft == 0) {
          this.resetTimer(index);
          this.setState((state, props) => {
            let teams = state.teams;
            teams[index].qLeft -= 1;
            return {
              ...state,
              teams: teams
            }
          })
        } else {
          this.setState((state, props) => {
            let teams = state.teams;
            teams[index].timeLeft -= 1;
            
            return {
              ...state,
              teams: teams
            }
          })
        }
      }, 1000);
    }
    
    this.manipulateTimer = (index) => {
      return ((event) => {
        this.setState((state, props) => {
          let teams = state.teams;
          
          if (teams[index].timerIsRunning) {
            clearInterval(teams[index].intervalId);
            teams[index].timerIsRunning = false;
          } else {
            teams[index].intervalId = this.controlTimer(index);
            teams[index].timerIsRunning = true;
          }
        })
      })
    }
    
    this.toggleLock = () => {
      this.setState((state, props) => {
        return {
          ...state,
          locked: !state.locked
        }
      })
    }
  }
  
  render() {
      return (
        <main>
          <button id="lock" onClick={this.toggleLock}>lock</button>
          <section>
            {
              !this.state.locked && [...this.state.teams.map(
                (team, index) => <Card>
                  <input 
                    type="text" 
                    value={this.state.teams[index].teamName}
                    onChange={this.handleTeamNameChange(index)}
                  />
                  <span>{team.qLeft} left</span>
                  <span>{team.timeLeft+"s"}</span>
                </Card>
              ), <p style={{textAlign: "center"}}>Words and stuff here</p>]
            }
            
            {
              this.state.locked && [...this.state.teams.map(
                (team, index) => {
                  if (team.teamName.length > 0)
                    return (
                      <Card>
                        <span>{team.teamName}</span>
                        <span className="questions">
                          {team.qLeft} left
                          <span className="question-buttons">
                            <Button onClick={this.manipulateQuestion(index, "subtract")}>-</Button>
                            <Button onClick={this.manipulateQuestion(index, "add")}>+</Button>
                          </span>
                        </span>
                        <Button onClick={this.manipulateTimer(index)}>
                          {team.timeLeft <= 10 && <span style={{color: "red"}}>{team.timeLeft + "s"}</span>}
                          {team.timeLeft > 10 && team.timeLeft + "s"}
                        </Button>
                        <Button onClick={()=>{this.resetTimer(index)}}>Reset</Button>
                      </Card>
                    )
                }
              ), <p style={{textAlign: "center"}}>Words and stuff here</p>]
            }
          </section>
        </main>
      );
  }
}

export default App;
